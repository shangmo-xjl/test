import uuid
import random
from math import prod
from Crypto.Util.number import isPrime, bytes_to_long

r = random.Random(0)
def deterministicGetPrime():
    while True:
        if isPrime(p := r.getrandbits(64)):
            return p

assert deterministicGetPrime() == 2710959347947821323

def getPrime(bit):
    factors = [deterministicGetPrime() for _ in range(bit // 64)]
    while True:
        p = 2 * prod(factors) + 1
        if isPrime(p):
            return p
        factors.remove(random.choice(factors))
        factors.append(deterministicGetPrime())

flag = "ctbuctf{" + str(uuid.uuid4()) + "}"
m = bytes_to_long(flag.encode())

p, q = getPrime(1024), getPrime(1024)
n = p * q
e = 0x10001
c = pow(m, e, n)

print("n =", n)
print("e =", e)
print("c =", c)

#n=3424868385438294976646107100923658075042044321462071006714235799487915082757375661954264615954197798561902124891671760352523516143031141333660430636486695121602780330976252069962670978872365942645485187493666314293221043972072117713402472848280808383111748881615599737011959346850423772823034448147116932354276019344267640789576860828356218027944708780352307024442376742574253379734156110321640524050608550419663580350467787045669896771463141579032215309120453400682735500480900916970515913038806384564255640797369157240214055860953006710482470126936110987160694015478412159547171723649257126318004641
#e=65537
#c=343042736583175278678465543660653141373518897505581910291508540786465915939503427585868117303662384764885637020249783744320652576612364685101792345282486494870452303567632539927273891497249245908669573480895511692303348331667386326859412424857790500993983513333153540002831253360208581615510691573887842000347964711049147482832857191969197858077405551589962687897805286811356308794541766253625694863258274191355266427238549165520154321541838726446950005941877514208793145867468956679688703368516716655841517266800144230443113933655507344706026866898517852086473753330834706497916789885019786824415016
